package dev.eblanvisuals.modules.impl.render;

import dev.eblanvisuals.client.events.impl.EventRender3D;
import dev.eblanvisuals.client.events.impl.EventTick;
import dev.eblanvisuals.client.events.impl.EventThemeChanged;
import dev.eblanvisuals.client.util.animations.Animation;
import dev.eblanvisuals.client.util.animations.Easing;
import dev.eblanvisuals.client.util.renderer.Render3D;
import dev.eblanvisuals.client.util.perf.Perf;
import dev.eblanvisuals.modules.api.Category;
import dev.eblanvisuals.modules.api.Module;
import dev.eblanvisuals.modules.settings.impl.NumberSetting;
import dev.eblanvisuals.modules.settings.impl.BooleanSetting;
import dev.eblanvisuals.modules.settings.impl.ListSetting;
import dev.eblanvisuals.EblanVisuals;
import dev.eblanvisuals.client.managers.ThemeManager;
import meteordevelopment.orbit.EventHandler;
import net.minecraft.client.network.ClientPlayerEntity;
import net.minecraft.client.util.math.MatrixStack;
import net.minecraft.util.Identifier;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.math.Vec3d;
import net.minecraft.client.resource.language.I18n;

import java.awt.Color;
import java.util.List;
import java.util.concurrent.CopyOnWriteArrayList;

public class JumpCircle extends Module implements ThemeManager.ThemeChangeListener {

    // üëá —Å–∏–ª—å–Ω–æ —É–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä
    private final NumberSetting size = new NumberSetting("Circle Size", 0.5f, 0.2f, 2.0f, 0.05f);
    private final NumberSetting Life_Time = new NumberSetting("Life Time", 0.5f, 0.2f, 2.0f, 0.05f);
    private final NumberSetting speed = new NumberSetting("Speed", 1.0f, 0.5f, 3.0f, 0.1f);

    private static final long GROW_MS = 600L;

    // –¢–µ–∫—Å—Ç—É—Ä—ã: –≤–∞—Ä–∏–∞–Ω—Ç 1 ‚Äî jumpcircle.png, –≤–∞—Ä–∏–∞–Ω—Ç 2 ‚Äî circle.png
    private final BooleanSetting texJumpCircle = new BooleanSetting("First", true, () -> false);
    private final BooleanSetting texCircle = new BooleanSetting("Second", false, () -> false);
    private final ListSetting textureMode = new ListSetting("Texture", true, texJumpCircle, texCircle);

    // –ê–Ω–∏–º–∞—Ü–∏–∏: Grow, Pulse, Ripple
    private final BooleanSetting animGrow = new BooleanSetting("Grow", true, () -> false);
    private final BooleanSetting animPulse = new BooleanSetting("Pulse", false, () -> false);
    private final BooleanSetting animRipple = new BooleanSetting("Ripple", false, () -> false);
    private final ListSetting animationMode = new ListSetting("Animation", true, animGrow, animPulse, animRipple);

    private final Identifier texJump = EblanVisuals.id("textures/jumpcircle.png");
    private final Identifier texCircle2 = EblanVisuals.id("textures/circle.png");

    private final List<Circle> circles = new CopyOnWriteArrayList<>();
    private final ThemeManager themeManager;
    private Color currentColor;

    private boolean wasOnGround = true;
    private long lastJumpTime = 0;

    public JumpCircle() {
        super("JumpCircle", Category.Render, I18n.translate("module.jumpcircle.description"));
        this.themeManager = ThemeManager.getInstance();
        this.currentColor = themeManager.getThemeColor();
        themeManager.addThemeChangeListener(this);
    }

    @Override
    public void onThemeChanged(ThemeManager.Theme theme) {
        this.currentColor = theme.getBackgroundColor();
    }

    @EventHandler
    public void onThemeChanged(EventThemeChanged event) {
        this.currentColor = event.getTheme().getBackgroundColor();
    }

    @Override
    public void onDisable() {
        themeManager.removeThemeChangeListener(this);
        circles.clear();
        super.onDisable();
    }

    @EventHandler
    public void onTick(EventTick e) {
        if (fullNullCheck()) return;
        ClientPlayerEntity p = mc.player;
        if (p == null) return;

        boolean onGround = p.isOnGround();
        long currentTime = System.currentTimeMillis();
        double velocityY = p.getVelocity().y;

        // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞: –∏–≥—Ä–æ–∫ –±—ã–ª –Ω–∞ –∑–µ–º–ª–µ, —Ç–µ–ø–µ—Ä—å –Ω–µ –Ω–∞ –∑–µ–º–ª–µ, –∏ –µ—Å—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å
        if (wasOnGround && !onGround && velocityY > 0.01 && (currentTime - lastJumpTime) > 50) {
            // –°–æ–∑–¥–∞–µ–º –∫—Ä—É–≥ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ –ø—Ä—ã–∂–∫–∞, –Ω–æ –Ω–∞ 1 –±–ª–æ–∫ –≤—ã—à–µ
            BlockPos blockPos = p.getBlockPos();
            double y = blockPos.getY() + 0.1; // –ù–∞ 1 –±–ª–æ–∫ –≤—ã—à–µ + –Ω–µ–±–æ–ª—å—à–æ–π –æ—Ç—Å—Ç—É–ø
            Vec3d origin = new Vec3d(p.getX(), y, p.getZ());
            circles.add(new Circle(origin, (long) (Life_Time.getValue() * 1000L)));
            lastJumpTime = currentTime;
        }

        wasOnGround = onGround;
    }

    @EventHandler
    public void onRender3D(EventRender3D.Game e) {
        if (fullNullCheck()) return;
        try (var __ = Perf.scopeCpu("JumpCircle.onRender3D")) {
            long now = System.currentTimeMillis();
            circles.removeIf(c -> (now - c.spawnTime) > c.ttl);

            for (Circle c : circles) {
                long age = now - c.spawnTime;

                // –ù–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ–ª–∏—á–∏–Ω–∞ –≤—Ä–µ–º–µ–Ω–∏ –∂–∏–∑–Ω–∏ 0..1 —Å —É—á–µ—Ç–æ–º —Å–∫–æ—Ä–æ—Å—Ç–∏
                float t = Math.max(0f, Math.min(1f, (age / (float) c.ttl) * speed.getValue()));

                // –í—ã—á–∏—Å–ª—è–µ–º –º–∞—Å—à—Ç–∞–± –∏ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
                float radiusMul;
                float alphaK;
                if (animPulse.getValue()) {
                    // –ü—É–ª—å—Å–∞—Ü–∏—è: –Ω–µ—Å–∫–æ–ª—å–∫–æ ¬´–≤—Å–ø–ª–µ—Å–∫–æ–≤¬ª –≤ —Ç–µ—á–µ–Ω–∏–µ –∂–∏–∑–Ω–∏
                    float pulses = 2.0f; // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—É–ª—å—Å–æ–≤
                    float s = (float) Math.sin(Math.PI * pulses * t);
                    radiusMul = 0.7f + 0.5f * Math.max(0f, s);
                    alphaK = Math.max(0f, s) * (1.0f - t);
                } else if (animRipple.getValue()) {
                    // Ripple: –º—è–≥–∫–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ/–∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ –∏ ease-out –ø–æ —Ä–∞–¥–∏—É—Å—É
                    float te = Easing.EASE_OUT_CIRC.apply(Math.max(0f, Math.min(1f, t)));
                    radiusMul = 0.6f + 0.8f * te;
                    alphaK = (float) Math.pow(Math.sin(Math.max(0f, Math.min(1f, t)) * (float) Math.PI), 1.2f);
                } else {
                    // Grow: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–ª–∞–≤–Ω—ã–π S-curve –ø–æ –≤—Ä–µ–º–µ–Ω–∏ + —ç–∫—Å–ø. –∑–∞—Ç—É—Ö–∞–Ω–∏–µ
                    float te = Easing.BOTH_SINE.apply(t);
                    radiusMul = 0.6f + 0.4f * te;
                    alphaK = (float) Math.pow(1.0f - t, 0.8f) * te;
                }

                alphaK = Math.max(0f, Math.min(1f, alphaK));
                int alpha = (int) (255 * alphaK);
                if (alpha <= 2) continue;

                float r = size.getValue() * radiusMul;
                // Live theme color each frame for gradient themes
                Color themeColor = themeManager.getCurrentTheme().getBackgroundColor();
                Color drawColor = new Color(themeColor.getRed(), themeColor.getGreen(), themeColor.getBlue(), alpha);

                MatrixStack matrices = e.getMatrices();
                matrices.push();
                matrices.translate(
                        c.origin.x - mc.getEntityRenderDispatcher().camera.getPos().x,
                        c.origin.y - mc.getEntityRenderDispatcher().camera.getPos().y,
                        c.origin.z - mc.getEntityRenderDispatcher().camera.getPos().z
                );

                Identifier texture = getSelectedTexture();
                Render3D.drawTextureVivid(
                        matrices,
                        -r, 0, -r,
                        r, 0, r,
                        texture,
                        drawColor,
                        1.0f
                );

                matrices.pop();
            }
        }
    }

    private Identifier getSelectedTexture() {
        if (texJumpCircle.getValue() && texCircle.getValue()) {
            texCircle.setValue(false);
        }
        if (!texJumpCircle.getValue() && !texCircle.getValue()) {
            texJumpCircle.setValue(true);
        }
        return texJumpCircle.getValue() ? texJump : texCircle2;
    }

    private static class Circle {
        final Vec3d origin;
        final long spawnTime;
        final long ttl;

        Circle(Vec3d origin, long ttl) {
            this.origin = origin;
            this.spawnTime = System.currentTimeMillis();
            this.ttl = ttl;
        }
    }
}